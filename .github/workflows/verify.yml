name: Verify

on:
  push:
    branches:
      - develop
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-latest
          - macos-latest
        blender-version:
          - '2.93.9'
          - '3.1.2'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python v3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Cache Blender ${{ matrix.blender-version }}
        uses: actions/cache@v3
        id: cache-blender
        with:
          path: |
            blender-*
            _blender-executable-path.txt
          key: ${{ runner.os }}-${{ matrix.blender-version }}
      - name: Download Blender ${{ matrix.blender-version }}
        if: steps.cache-blender.outputs.cache-hit != 'true'
        id: download-blender
        run: |
          python -m pip install -U pip blender-downloader
          echo "$(blender-downloader \
          ${{ matrix.blender-version }} --extract --remove-compressed \
          --print-blender-executable --quiet)" > _blender-executable-path.txt
      - name: Install dependencies
        id: install-dependencies
        run: |
          python -m pip install -r test-requirements.txt
          blender_executable="$(< _blender-executable-path.txt tr -d '\n')"
          python_blender_executable="$(pytest-blender --blender-executable $blender_executable)"
          $python_blender_executable -m ensurepip
          pytest_version="$(< test-requirements.txt grep pytest== | head -n 1 | cut -d'=' -f3)"
          $python_blender_executable -m pip install pytest==$pytest_version
          echo "::set-output name=blender-executable::$blender_executable"
      - name: Run tests
        run: pytest -s --blender-executable "${{ steps.install-dependencies.outputs.blender-executable }}" tests
